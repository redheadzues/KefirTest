//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Source/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Ship"",
            ""id"": ""f4119313-b15c-41ea-bbc9-727ae04e3f70"",
            ""actions"": [
                {
                    ""name"": ""MoveForward"",
                    ""type"": ""Button"",
                    ""id"": ""3513e023-6edf-48ff-9737-614a19cbafcb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FirstWeaponShoot"",
                    ""type"": ""Button"",
                    ""id"": ""2825ec2a-7fa0-4763-9693-b18259bdc8c2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondWeaponShoot"",
                    ""type"": ""Button"",
                    ""id"": ""caf974fc-832f-42e9-affb-1e6461d9ac8d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""d2808ee5-23ce-4f48-93d8-de0e67c6e4fc"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1f648db0-cb8f-4f66-9499-41099ae97b29"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": ""Hold(duration=0.001,pressPoint=0.001)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""12468324-f5ba-4f40-a0e9-dd8eaa35c246"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FirstWeaponShoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ee6073d4-571b-498d-8b26-162db7cc1217"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondWeaponShoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Direction"",
                    ""id"": ""758d885b-af51-447e-8c7d-7d60bb8b8104"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""7611acf6-5091-4808-99b1-cbcb04d3ec4e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""e7823f2f-7ab0-46c3-8c8a-0c828e21fb03"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Ship
        m_Ship = asset.FindActionMap("Ship", throwIfNotFound: true);
        m_Ship_MoveForward = m_Ship.FindAction("MoveForward", throwIfNotFound: true);
        m_Ship_FirstWeaponShoot = m_Ship.FindAction("FirstWeaponShoot", throwIfNotFound: true);
        m_Ship_SecondWeaponShoot = m_Ship.FindAction("SecondWeaponShoot", throwIfNotFound: true);
        m_Ship_Rotate = m_Ship.FindAction("Rotate", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Ship
    private readonly InputActionMap m_Ship;
    private IShipActions m_ShipActionsCallbackInterface;
    private readonly InputAction m_Ship_MoveForward;
    private readonly InputAction m_Ship_FirstWeaponShoot;
    private readonly InputAction m_Ship_SecondWeaponShoot;
    private readonly InputAction m_Ship_Rotate;
    public struct ShipActions
    {
        private @PlayerInput m_Wrapper;
        public ShipActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveForward => m_Wrapper.m_Ship_MoveForward;
        public InputAction @FirstWeaponShoot => m_Wrapper.m_Ship_FirstWeaponShoot;
        public InputAction @SecondWeaponShoot => m_Wrapper.m_Ship_SecondWeaponShoot;
        public InputAction @Rotate => m_Wrapper.m_Ship_Rotate;
        public InputActionMap Get() { return m_Wrapper.m_Ship; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ShipActions set) { return set.Get(); }
        public void SetCallbacks(IShipActions instance)
        {
            if (m_Wrapper.m_ShipActionsCallbackInterface != null)
            {
                @MoveForward.started -= m_Wrapper.m_ShipActionsCallbackInterface.OnMoveForward;
                @MoveForward.performed -= m_Wrapper.m_ShipActionsCallbackInterface.OnMoveForward;
                @MoveForward.canceled -= m_Wrapper.m_ShipActionsCallbackInterface.OnMoveForward;
                @FirstWeaponShoot.started -= m_Wrapper.m_ShipActionsCallbackInterface.OnFirstWeaponShoot;
                @FirstWeaponShoot.performed -= m_Wrapper.m_ShipActionsCallbackInterface.OnFirstWeaponShoot;
                @FirstWeaponShoot.canceled -= m_Wrapper.m_ShipActionsCallbackInterface.OnFirstWeaponShoot;
                @SecondWeaponShoot.started -= m_Wrapper.m_ShipActionsCallbackInterface.OnSecondWeaponShoot;
                @SecondWeaponShoot.performed -= m_Wrapper.m_ShipActionsCallbackInterface.OnSecondWeaponShoot;
                @SecondWeaponShoot.canceled -= m_Wrapper.m_ShipActionsCallbackInterface.OnSecondWeaponShoot;
                @Rotate.started -= m_Wrapper.m_ShipActionsCallbackInterface.OnRotate;
                @Rotate.performed -= m_Wrapper.m_ShipActionsCallbackInterface.OnRotate;
                @Rotate.canceled -= m_Wrapper.m_ShipActionsCallbackInterface.OnRotate;
            }
            m_Wrapper.m_ShipActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MoveForward.started += instance.OnMoveForward;
                @MoveForward.performed += instance.OnMoveForward;
                @MoveForward.canceled += instance.OnMoveForward;
                @FirstWeaponShoot.started += instance.OnFirstWeaponShoot;
                @FirstWeaponShoot.performed += instance.OnFirstWeaponShoot;
                @FirstWeaponShoot.canceled += instance.OnFirstWeaponShoot;
                @SecondWeaponShoot.started += instance.OnSecondWeaponShoot;
                @SecondWeaponShoot.performed += instance.OnSecondWeaponShoot;
                @SecondWeaponShoot.canceled += instance.OnSecondWeaponShoot;
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
            }
        }
    }
    public ShipActions @Ship => new ShipActions(this);
    public interface IShipActions
    {
        void OnMoveForward(InputAction.CallbackContext context);
        void OnFirstWeaponShoot(InputAction.CallbackContext context);
        void OnSecondWeaponShoot(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
    }
}
